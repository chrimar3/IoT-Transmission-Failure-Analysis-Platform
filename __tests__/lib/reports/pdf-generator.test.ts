import { generatePDF } from '@/src/lib/reports/pdf-generator'
import { ReportTemplate } from '@/types/reports'
import PDFDocument from 'pdfkit'

// Mock PDFKit
jest.mock('pdfkit')

const mockPDFDocument = PDFDocument as jest.MockedClass<typeof PDFDocument>

describe('PDF Generator', () => {
  const mockTemplate: ReportTemplate = {
    id: 'template-123',
    user_id: 'user-123',
    name: 'Test Report',
    category: 'executive',
    template_data: {
      layout: {
        page_size: 'A4',
        orientation: 'portrait',
        margins: { top: 20, bottom: 20, left: 20, right: 20 },
        header_height: 60,
        footer_height: 40,
        grid_columns: 12,
        grid_rows: 20
      },
      components: [
        {
          id: 'text-1',
          type: 'text',
          position: { x: 50, y: 100, width: 400, height: 100 },
          config: { content: 'Sample text content' },
          styling: {
            font_size: 14,
            text_color: '#333333',
            text_align: 'left'
          }
        },
        {
          id: 'chart-1',
          type: 'chart',
          position: { x: 50, y: 250, width: 400, height: 300 },
          config: { chart_type: 'line' },
          data_binding: { source: 'bangkok_dataset' }
        },
        {
          id: 'metric-1',
          type: 'metric',
          position: { x: 50, y: 600, width: 200, height: 100 },
          config: {
            value_source: 'average_temperature',
            format: {
              decimal_places: 2,
              unit: '°C',
              prefix: '',
              suffix: ''
            }
          }
        }
      ],
      styling: {
        color_scheme: {
          primary: '#2563eb',
          secondary: '#64748b',
          background: '#ffffff',
          surface: '#f8fafc',
          text_primary: '#1e293b',
          text_secondary: '#64748b',
          accent: '#0ea5e9',
          warning: '#f59e0b',
          error: '#dc2626',
          success: '#16a34a'
        },
        typography: {
          heading_font: 'Inter',
          body_font: 'Inter',
          heading_sizes: { h1: 24, h2: 20, h3: 18, h4: 16 },
          body_size: 14,
          line_height: 1.5
        },
        spacing: { component_margin: 16, section_padding: 24, element_spacing: 8 },
        borders: { default_width: 1, default_color: '#e5e7eb', default_style: 'solid' }
      },
      branding: {
        company_name: 'Test Company',
        company_colors: {
          primary: '#2563eb',
          secondary: '#64748b',
          accent: '#0ea5e9'
        },
        footer_text: 'Generated by Test Company'
      },
      data_configuration: {
        sensors: ['sensor-1', 'sensor-2'],
        date_range: {
          start_date: '2023-01-01',
          end_date: '2023-12-31'
        },
        filters: {
          equipment_type: 'hvac'
        },
        aggregation: 'daily' as const
      }
    },
    is_public: false,
    version: '1.0',
    tags: [],
    created_at: '2023-01-01T00:00:00Z',
    updated_at: '2023-01-01T00:00:00Z',
    usage_count: 0
  }

  const mockData = {
    dataPoints: [
      {
        timestamp: '2023-01-01T00:00:00Z',
        value: 25.5,
        sensor_id: 'sensor-1',
        equipment_type: 'hvac'
      }
    ],
    aggregations: {
      average_temperature: 25.5,
      total_readings: 100
    },
    charts: {
      'chart-1': {
        labels: ['Jan', 'Feb', 'Mar'],
        datasets: [{
          label: 'Temperature',
          data: [20, 25, 30],
          backgroundColor: '#2563eb'
        }]
      }
    },
    tables: {},
    insights: [
      'Average temperature: 25.5°C',
      'Data shows increasing trend'
    ]
  }

  interface MockPDFDoc {
    fontSize: jest.Mock
    fillColor: jest.Mock
    text: jest.Mock
    image: jest.Mock
    rect: jest.Mock
    fill: jest.Mock
    stroke: jest.Mock
    moveTo: jest.Mock
    lineTo: jest.Mock
    on: jest.Mock
    end: jest.Mock
    page: { height: number }
  }

  let mockDoc: MockPDFDoc

  beforeEach(() => {
    mockDoc = {
      fontSize: jest.fn().mockReturnThis(),
      fillColor: jest.fn().mockReturnThis(),
      text: jest.fn().mockReturnThis(),
      image: jest.fn().mockReturnThis(),
      rect: jest.fn().mockReturnThis(),
      fill: jest.fn().mockReturnThis(),
      stroke: jest.fn().mockReturnThis(),
      moveTo: jest.fn().mockReturnThis(),
      lineTo: jest.fn().mockReturnThis(),
      on: jest.fn(),
      end: jest.fn(),
      page: { height: 800 }
    }

    mockPDFDocument.mockImplementation(() => mockDoc as any)
    jest.clearAllMocks()
  })

  describe('generatePDF', () => {
    it('should create a PDF document with correct settings', async () => {
      // Mock the PDF generation to resolve immediately
      (mockDoc.on as jest.Mock).mockImplementation((event: string, callback: () => void) => {
        if (event === 'end') {
          setTimeout(() => callback(), 0)
        }
        return mockDoc
      })

      const promise = generatePDF(mockTemplate, mockData, {})

      // Trigger the end event to resolve the promise
      const endCallback = (mockDoc.on as jest.Mock).mock.calls.find(call => call[0] === 'end')?.[1]
      if (endCallback) {
        setTimeout(endCallback, 0)
      }

      await expect(promise).resolves.toBeInstanceOf(Buffer)

      expect(PDFDocument).toHaveBeenCalledWith({
        size: 'A4',
        layout: 'portrait',
        margins: {
          top: 20,
          bottom: 20,
          left: 20,
          right: 20
        }
      })
    })

    it('should add company branding to the PDF', async () => {
      (mockDoc.on as jest.Mock).mockImplementation((event: string, callback: () => void) => {
        if (event === 'end') {
          setTimeout(() => callback(), 0)
        }
        return mockDoc
      })

      await generatePDF(mockTemplate, mockData, {})

      expect(mockDoc.fontSize).toHaveBeenCalledWith(20)
      expect(mockDoc.fillColor).toHaveBeenCalledWith('#2563eb')
      expect(mockDoc.text).toHaveBeenCalledWith('Test Company', 50, 50)
    })

    it('should add report header with metadata', async () => {
      (mockDoc.on as jest.Mock).mockImplementation((event: string, callback: () => void) => {
        if (event === 'end') {
          setTimeout(() => callback(), 0)
        }
        return mockDoc
      })

      await generatePDF(mockTemplate, mockData, {})

      expect(mockDoc.text).toHaveBeenCalledWith('Test Report', 50, 100)
      expect(mockDoc.text).toHaveBeenCalledWith(
        expect.stringContaining('Generated:'),
        50, 125
      )
      expect(mockDoc.text).toHaveBeenCalledWith('Category: executive', 50, 155)
    })

    it('should render text components correctly', async () => {
      (mockDoc.on as jest.Mock).mockImplementation((event: string, callback: () => void) => {
        if (event === 'end') {
          setTimeout(() => callback(), 0)
        }
        return mockDoc
      })

      await generatePDF(mockTemplate, mockData, {})

      expect(mockDoc.fontSize).toHaveBeenCalledWith(14)
      expect(mockDoc.fillColor).toHaveBeenCalledWith('#333333')
      expect(mockDoc.text).toHaveBeenCalledWith(
        'Sample text content',
        60, // x + 10 for padding
        310, // y + 200 offset for header + 10 for padding
        expect.objectContaining({
          width: 380, // width - 20 for padding
          height: 80, // height - 20 for padding
          align: 'left'
        })
      )
    })

    it('should render metric components with formatted values', async () => {
      (mockDoc.on as jest.Mock).mockImplementation((event: string, callback: () => void) => {
        if (event === 'end') {
          setTimeout(() => callback(), 0)
        }
        return mockDoc
      })

      await generatePDF(mockTemplate, mockData, {})

      expect(mockDoc.fontSize).toHaveBeenCalledWith(24)
      expect(mockDoc.fillColor).toHaveBeenCalledWith('#2563eb')
      expect(mockDoc.text).toHaveBeenCalledWith(
        '25.50°C',
        60,
        820, // y + 200 offset + 20 for metric positioning
        expect.objectContaining({
          width: 180,
          align: 'center'
        })
      )
    })

    it('should add footer with branding text', async () => {
      (mockDoc.on as jest.Mock).mockImplementation((event: string, callback: () => void) => {
        if (event === 'end') {
          setTimeout(() => callback(), 0)
        }
        return mockDoc
      })

      await generatePDF(mockTemplate, mockData, {})

      expect(mockDoc.fontSize).toHaveBeenCalledWith(8)
      expect(mockDoc.text).toHaveBeenCalledWith(
        'Generated by Test Company',
        50,
        750, // pageHeight - 50
        expect.objectContaining({
          align: 'center'
        })
      )
    })

    it('should handle missing branding gracefully', async () => {
      const templateWithoutBranding = {
        ...mockTemplate,
        template_data: {
          ...mockTemplate.template_data,
          branding: {} as any
        }
      } as any

      (mockDoc.on as jest.Mock).mockImplementation((event: string, callback: () => void) => {
        if (event === 'end') {
          setTimeout(() => callback(), 0)
        }
        return mockDoc
      })

      await generatePDF(templateWithoutBranding, mockData, {})

      expect(mockDoc.text).toHaveBeenCalledWith(
        'Generated by CU-BEMS IoT Transmission Failure Analysis Platform',
        50,
        750,
        expect.objectContaining({
          align: 'center'
        })
      )
    })

    it('should handle PDF generation errors', async () => {
      (mockDoc.on as jest.Mock).mockImplementation((event: string, callback: (error?: Error) => void) => {
        if (event === 'error') {
          setTimeout(() => callback(new Error('PDF generation failed')), 0)
        }
        return mockDoc
      })

      // We need to manually trigger the error
      const promise = generatePDF(mockTemplate, mockData, {})

      // Trigger the error
      const errorCallback = (mockDoc.on as jest.Mock).mock.calls.find(call => call[0] === 'error')?.[1]
      if (errorCallback) {
        setTimeout(() => (errorCallback as (error: Error) => void)(new Error('PDF generation failed')), 0)
      }

      await expect(promise).rejects.toThrow('PDF generation failed')
    })

    it('should apply custom parameters', async () => {
      const customParams = {
        title: 'Custom Report Title',
        watermark: true
      } as any

      (mockDoc.on as jest.Mock).mockImplementation((event: string, callback: () => void) => {
        if (event === 'end') {
          setTimeout(() => callback(), 0)
        }
        return mockDoc
      })

      await generatePDF(mockTemplate, mockData, customParams)

      // The custom parameters would be used in the PDF generation logic
      // This test verifies the function accepts and can process them
      expect(mockDoc.end).toHaveBeenCalled()
    })

    it('should handle different page sizes and orientations', async () => {
      const landscapeTemplate = {
        ...mockTemplate,
        template_data: {
          ...mockTemplate.template_data,
          layout: {
            ...mockTemplate.template_data.layout,
            page_size: 'Letter' as const,
            orientation: 'landscape' as const
          }
        }
      } as any

      (mockDoc.on as jest.Mock).mockImplementation((event: string, callback: () => void) => {
        if (event === 'end') {
          setTimeout(() => callback(), 0)
        }
        return mockDoc
      })

      await generatePDF(landscapeTemplate, mockData, {})

      expect(PDFDocument).toHaveBeenCalledWith({
        size: 'Letter',
        layout: 'landscape',
        margins: expect.any(Object)
      })
    })
  })

  describe('Component Rendering', () => {
    it('should render all component types without errors', async () => {
      const allComponentsTemplate = {
        ...mockTemplate,
        template_data: {
          ...mockTemplate.template_data,
          components: [
            { id: '1', type: 'text', position: { x: 0, y: 0, width: 100, height: 50 }, config: { content: 'Text' } },
            { id: '2', type: 'header', position: { x: 0, y: 60, width: 100, height: 50 }, config: { content: 'Header' } },
            { id: '3', type: 'chart', position: { x: 0, y: 120, width: 100, height: 50 }, config: { chart_type: 'bar' } },
            { id: '4', type: 'table', position: { x: 0, y: 180, width: 100, height: 50 }, config: {} },
            { id: '5', type: 'metric', position: { x: 0, y: 240, width: 100, height: 50 }, config: {} },
            { id: '6', type: 'image', position: { x: 0, y: 300, width: 100, height: 50 }, config: {} },
            { id: '7', type: 'divider', position: { x: 0, y: 360, width: 100, height: 50 }, config: {} }
          ]
        }
      } as any

      (mockDoc.on as jest.Mock).mockImplementation((event: string, callback: () => void) => {
        if (event === 'end') {
          setTimeout(() => callback(), 0)
        }
        return mockDoc
      })

      await expect(generatePDF(allComponentsTemplate, mockData, {})).resolves.toBeInstanceOf(Buffer)
    })
  })
})